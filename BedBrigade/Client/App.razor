@using System.Reflection
@using System
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Logging
@using BedBrigade.Admin
@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<App> Logger

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly"
            PreferExactMatches="@true"
            AdditionalAssemblies="@lazyLoadedAssemblies"
            OnNavigateAsync="@OnNavigateAsync">
@*        <Navigating>
            <div>
                <p>Loading Administration</p>
            </div>
        </Navigating>
*@        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                        <h3>Whoops! You're not allowed to see this page.</h3>
                        <h5>Please <a href="home/login">login</a></h5>
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private List<Assembly> lazyLoadedAssemblies = new();
    private const string AdminFullName = "BedBrigade.Admin.dll";

    private async Task OnNavigateAsync(NavigationContext args)
    {
        Logger.LogInformation("OnNavigate: {0}", args.Path);
        if(args.Path.ToLower().Contains("administration"))
        {
            try
            {
                    var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { AdminFullName });
                    lazyLoadedAssemblies.AddRange(assemblies);        
            }
            catch (Exception ex)
            {
                Logger.LogError("Error: {Message}", ex.Message);
            }
        }
    }
}
